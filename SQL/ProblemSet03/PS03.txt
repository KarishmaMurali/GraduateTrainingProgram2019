PROBLEM SET 03:
==============



TABLE CREATION:
================

mysql> select * from Movie;
+------+-------------------------+------+------------------+
| mID  | title                   | year | director         |
+------+-------------------------+------+------------------+
|  101 | Gone with the Wind      | 1939 | Victor Fleming   |
|  102 | Star Wars               | 1977 | George Lucas     |
|  103 | The Sound of Music      | 1965 | Robert Wise      |
|  104 | E.T.                    | 1982 | Steven Spielberg |
|  105 | Titanic                 | 1997 | James Cameron    |
|  106 | Snow White              | 1937 | NULL             |
|  107 | Avatar                  | 2009 | James Cameron    |
|  108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+------+-------------------------+------+------------------+
8 rows in set (0.00 sec)

mysql> select * from Reviewer;
+------+------------------+
| rID  | name             |
+------+------------------+
|  201 | Sarah Martinez   |
|  202 | Daniel Lewis     |
|  203 | Brittany Harris  |
|  204 | Mike Anderson    |
|  205 | Chris Jackson    |
|  206 | Elizabeth Thomas |
|  207 | James Cameron    |
|  208 | Ashley White     |
+------+------------------+
8 rows in set (0.00 sec)

mysql> select * from Rating;
+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
14 rows in set (0.00 sec)





SOLUTIONS:
==========

1.Find the titles of all movies directed by Steven Spielberg. (1 point possible)


mysql> select title from Movie where director='Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)



2.Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)


mysql> select r.ratingDate,m.title from Rating r join Movie m on m.mID=r.mID whe
re stars>=4 order by ratingDate;
+------------+-------------------------+
| ratingDate | title                   |
+------------+-------------------------+
| NULL       | Snow White              |
| NULL       | Raiders of the Lost Ark |
| 2011-01-12 | Raiders of the Lost Ark |
| 2011-01-19 | Snow White              |
| 2011-01-20 | Avatar                  |
| 2011-01-27 | Gone with the Wind      |
+------------+-------------------------+
6 rows in set (0.10 sec)




3.Find the titles of all movies that have no ratings. (1 point possible)


mysql> select m.title from Rating r join Movie m on m.mID=r.mID where stars=0;
Empty set (0.08 sec)



4.Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

mysql> select r2.name from Rating r1 join Reviewer r2 on r1.rID=r2.rID where rat
ingDate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)



5.Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)


mysql> select r2.name,m.title,r1.stars,r1.ratingDate from Rating r1 join Reviewer r2 on r1.rID=r2.rID inner join Movie m on m.mID=r1.mID order by r2.name,
    -> m.title,r1.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.01 sec)



6.For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)


mysql> select r1.rid,r1.mid from rating r1 join rating r2
    -> on r1.rid=r2.rid and r1.mid=r2.mid
    -> where r1.stars<r2.stars and r1.ratingdate<r2.ratingdate;
+------+------+
| rid  | mid  |
+------+------+
|  201 |  101 |
+------+------+
1 row in set (0.00 sec)



7.For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)


mysql> select m.title, MAX(r.stars) from Rating r
    -> join Movie m on m.mID=r.mID group by m.mID order by m.title;
+-------------------------+--------------+
| title                   | MAX(r.stars) |
+-------------------------+--------------+
| Avatar                  |            5 |
| E.T.                    |            3 |
| Gone with the Wind      |            4 |
| Raiders of the Lost Ark |            4 |
| Snow White              |            5 |
| The Sound of Music      |            3 |
+-------------------------+--------------+
6 rows in set (0.01 sec)



8.For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> select title, (MAX(stars) - MIN(stars)) as ratingspread from Movie m inne
r join Rating r on m.mID=r.mID group by r.mId order by ratingspread DESC, title;

+-------------------------+--------------+
| title                   | ratingspread |
+-------------------------+--------------+
| Avatar                  |            2 |
| Gone with the Wind      |            2 |
| Raiders of the Lost Ark |            2 |
| E.T.                    |            1 |
| Snow White              |            1 |
| The Sound of Music      |            1 |
+-------------------------+--------------+
6 rows in set (0.01 sec)



9.Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)


mysql> create table before1980 AS (select AVG(stars) as avg1 from Movie m join Rating r
on m.mID=r.mID  where year < 1980 group by r.mId);
Query OK, 3 rows affected (0.33 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from before1980;
+------------+
| avg1       |
+------------+
|     3.0000 |
|     2.5000 |
|     4.5000 |
+------------+
3 rows in set (0.00 sec)

mysql> create table after1980 AS (select AVG(stars) as avg2 from Movie m join Rating r on m.mID=r.mID  where year > 1980 group by r.mId);
Query OK, 3 rows affected, 1 warning (0.22 sec)
Records: 3  Duplicates: 0  Warnings: 1

mysql> select * from after1980;
+------------+
| avg2       |
+------------+
|     2.5000 |
|     4.0000 |
|     3.3333 |
+------------+

3 rows in set (0.00 sec)


mysql> create table final AS (select AVG(avg1)-AVG(avg2) from Before1980,After19
80);
Query OK, 1 row affected, 1 warning (3.55 sec)
Records: 1  Duplicates: 0  Warnings: 1

mysql> select * from final;
+---------------------+
| AVG(avg1)-AVG(avg2) |
+---------------------+
|          0.05556667 |
+---------------------+
1 row in set (0.00 sec)




10.Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

mysql> SELECT DISTINCT r2.name
    -> from Movie m join Rating r1 on m.mID=r1.mID join Reviewer r2 on r1.rID=r2
.rID
    -> where m.title = "Gone with the Wind";
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.03 sec)



11.For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select r2.name, m.title, r1.stars from Movie m join Rating r1 on m.mID=r1
.mID join Reviewer r2 on r1.rID=r2.rID
    -> WHERE m.director = r2.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)



12.Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

mysql> create table list as(select r2.name,m.title from Movie m join Rating r1 o
n m.mID=r1
    -> .mID join Reviewer r2 on r1.rID=r2.rID order by r2.name,m.title);
Query OK, 14 rows affected (0.38 sec)
Records: 14  Duplicates: 0  Warnings: 0

mysql> select * from list;
+------------------+-------------------------+
| name             | title                   |
+------------------+-------------------------+
| Ashley White     | E.T.                    |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | The Sound of Music      |
| Chris Jackson    | E.T.                    |
| Chris Jackson    | Raiders of the Lost Ark |
| Chris Jackson    | The Sound of Music      |
| Daniel Lewis     | Snow White              |
| Elizabeth Thomas | Avatar                  |
| Elizabeth Thomas | Snow White              |
| James Cameron    | Avatar                  |
| Mike Anderson    | Gone with the Wind      |
| Sarah Martinez   | Gone with the Wind      |
| Sarah Martinez   | Gone with the Wind      |
+------------------+-------------------------+
14 rows in set (0.00 sec)




13.Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)


mysql> select title from Movie  where mID not in (select r2.mID from Reviewer r1
 join Rating r2 on r1.rID=r2.rID where r1.name='Chris Jackson');
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.10 sec)



14.For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)



15.For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)




16.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)


mysql> select m.title,AVG(rt.stars) as avg from movie m join rating rt on m.mID=rt.mID group by m.title order by avg desc,m.title;
+-------------------------+--------+
| title                   | avg    |
+-------------------------+--------+
| Snow White              | 4.5000 |
| Avatar                  | 4.0000 |
| Raiders of the Lost Ark | 3.3333 |
| Gone with the Wind      | 3.0000 |
| E.T.                    | 2.5000 |
| The Sound of Music      | 2.5000 |
+-------------------------+--------+
6 rows in set (0.01 sec)



17.Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)


mysql> select name from Reviewer r1 join Rating r2 on r1.rID=r2.rID group by r2.
rId having count(*) >= 3;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.01 sec)



18.Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select m1.title,m2.director from movie m1 join movie m2 on m1.director=m2
.director group by m1.mID having count(*)>1 order by director,title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.01 sec)


19.Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)


20.Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)




21.For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

mysql> select m.director,m.title,max(r.stars) from Movie m join Rating r on m.mI
D=r.mID where director IS NOT NULL group by m.director;
+------------------+-------------------------+--------------+
| director         | title                   | max(r.stars) |
+------------------+-------------------------+--------------+
| James Cameron    | Avatar                  |            5 |
| Robert Wise      | The Sound of Music      |            3 |
| Steven Spielberg | Raiders of the Lost Ark |            4 |
| Victor Fleming   | Gone with the Wind      |            4 |
+------------------+-------------------------+--------------+
4 rows in set (0.01 sec)